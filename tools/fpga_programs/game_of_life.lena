    ctrl nop

    # R1: Size of a screen buffer (320*240)
    ctrl addi R1 ZERO 150
    ctrl sll R1 R1
    ctrl sll R1 R1
    ctrl sll R1 R1
    ctrl sll R1 R1
    ctrl sll R1 R1
    ctrl sll R1 R1
    ctrl sll R1 R1
    ctrl sll R1 R1
    ctrl sll R1 R1

    # R2 and R3: Offsets for the memory locations we're alternating read and write to
    ctrl add R2 ZERO ZERO
    ctrl add R3 R1 ZERO

vgacopy:
    # R10: Read address from data memory
    ctrl add R10 R2 ZERO
    ctrl add VADDR ZERO ZERO

pixel_loop:
    ctrl lw R12 R10
    ctrl nop

    ctrl beq vdata_to_white
    ctrl eqi ZERO R12 1
    ctrl nop
    ctrl addi R12 ZERO 0
    ctrl jump after_add_vdata

vdata_to_white:
    ctrl addi R12 ZERO 255

after_add_vdata:
    ctrl add VDATA R12 ZERO
    ctrl addi VADDR VADDR 1
    ctrl addi R10 R10 1

    ctrl beq dma_start
    ctrl slt ZERO R1 VADDR
    ctrl nop

    ctrl jump pixel_loop

dma_start:
    ctrl add R10 R2 ZERO
    ctrl add R2 R3 ZERO
    ctrl add R3 R10 ZERO

    ctrl nop

    # Set DMA read to active
    ctrl addi DMA ZERO 1
    ctrl dma set_read_active
    ctrl nop

    # Set DMA write to active
    ctrl addi DMA ZERO 1
    ctrl dma set_write_active
    ctrl nop

    # Set DMA read and write increments to 320
    ctrl addi DMA ZERO 160
    ctrl sll DMA DMA
    ctrl dma set_write_vertical_incr
    ctrl dma set_read_vertical_incr
    ctrl nop

    ctrl addi R4 ZERO 160           # R4 = 320
    ctrl sll R4 R4
    ctrl sll R4 R4
    ctrl sll R4 R4
    ctrl add DMA ZERO R4            # DMA = R4 + 1 = 1280 + 1 = 1281
    ctrl addi DMA DMA 1
    ctrl dma set_write_horizontal_incr
    ctrl dma set_read_horizontal_incr
    ctrl nop

    ctrl addi R7 ZERO 0             # R7: Row start address accumulator
    ctrl addi R8 ZERO 80            # R8: Row counter

dma_loop:
    ctrl addi R6 ZERO 160           # R6: Column counter
    ctrl addi DMA R7 0

dma_row_loop:
    ctrl add DMA DMA R3
    ctrl dma set_read_base_addr    # write base addr = 19328
    ctrl sub DMA DMA R3
    ctrl add DMA DMA R2
    ctrl subi DMA DMA 4
    ctrl dma set_write_base_addr    # write base addr = 19328
    ctrl addi DMA DMA 6
    ctrl sub DMA DMA R2
    ctrl nop

    node swap R1 R1

    ctrl dma start

    node send R1 R1 R1 R1
    node fwrd R2 R3 R4 R5 # N S E W
    node store R6 R7 R8 R9

    node add R10 R2 R3
    node add R10 R10 R4
    node add R10 R10 R5
    node add R10 R10 R6
    node add R10 R10 R7
    node add R10 R10 R8
    node add R10 R10 R9

    node eqi R11 R10 3
    node add R10 R10 R1
    node eqi R12 R10 3
    node or STATE R11 R12
    node mask addi R1 ZERO 1 # branch taken
    node eq STATE STATE ZERO
    node mask addi R1 ZERO 0
    node add STATE ZERO ZERO

    ctrl nop
    ctrl nop
    ctrl nop

    ctrl nop
    ctrl nop
    ctrl nop
    ctrl nop
    ctrl nop

    ctrl nop
    ctrl nop
    ctrl nop
    ctrl nop
    ctrl nop

    ctrl nop
    ctrl nop
    ctrl nop
    ctrl nop
    ctrl nop

    ctrl nop
    ctrl nop
    ctrl nop
    ctrl nop
    ctrl nop

    ctrl subi R6 R6 1
    ctrl beq dma_row_loop
    ctrl slt ZERO ZERO R6
    ctrl nop

    ctrl addi R7 R7 160
    ctrl addi R7 R7 160
    ctrl addi R7 R7 160
    ctrl addi R7 R7 160
    ctrl addi R7 R7 160
    ctrl addi R7 R7 160

    ctrl subi R8 R8 1
    ctrl beq dma_loop
    ctrl slt ZERO ZERO R8
    ctrl nop

    ctrl jump vgacopy
