ctrl nop
ctrl addi R1 ZERO 150           # R1 = 320*240
ctrl sll R1 R1
ctrl sll R1 R1
ctrl sll R1 R1
ctrl sll R1 R1
ctrl sll R1 R1
ctrl sll R1 R1
ctrl sll R1 R1
ctrl sll R1 R1
ctrl sll R1 R1

ctrl addi R2 ZERO 255
ctrl sll R2 R2
ctrl sll R2 R2
ctrl sll R2 R2
ctrl sll R2 R2
ctrl sll R2 R2
ctrl sll R2 R2
ctrl sll R2 R2
ctrl sll R2 R2
ctrl sll R2 R2

ctrl add R10 ZERO ZERO
ctrl add R11 R1 ZERO

ctrl jump start

dma_start:
    ctrl add R3 R10 ZERO
    ctrl add R10 R11 ZERO
    ctrl add R11 R3 ZERO

    ctrl nop

    ctrl addi DMA ZERO 1
    ctrl dma set_read_active
    ctrl nop

    ctrl addi DMA ZERO 1
    ctrl dma set_write_active
    ctrl nop

    ctrl addi DMA ZERO 160
    ctrl sll DMA DMA
    ctrl dma set_write_vertical_incr
    ctrl dma set_read_vertical_incr
    ctrl nop

    ctrl addi R4 ZERO 160           # R4 = 320
    ctrl sll R4 R4
    ctrl add DMA ZERO R4            # DMA = R4 * 3 + 1 = 640 + 320 + 1
    ctrl add DMA DMA R4
    ctrl add DMA DMA R4
    ctrl addi DMA DMA 1
    ctrl dma set_write_horizontal_incr
    ctrl dma set_read_horizontal_incr
    ctrl nop

    ctrl addi R7 ZERO 3             # R7: Row start address accumulator
    ctrl addi R8 ZERO 118           # R8: Row counter

dma_loop:
    ctrl addi R6 ZERO 159           # R6: Column counter
    ctrl addi R7 R7 160
    ctrl addi R7 R7 160
    ctrl addi R7 R7 160
    ctrl addi R7 R7 160
    ctrl addi DMA R7 0

dma_row_loop:
    ctrl add DMA DMA R11
    ctrl dma set_read_base_addr    # write base addr = 19328
    ctrl sub DMA DMA R11
    ctrl add DMA DMA R10
    ctrl subi DMA DMA 4
    ctrl dma set_write_base_addr    # write base addr = 19328
    ctrl addi DMA DMA 4
    ctrl sub DMA DMA R10
    ctrl addi DMA DMA 2
    ctrl nop

    node swap R1 R14

    ctrl dma start

    #node subi R1 R1 128

    #node eqi STATE R1 0
    #node mask addi R1 ZERO 1
    #node eq STATE STATE ZERO
    #node mask addi R1 ZERO 0
    #node add STATE ZERO ZERO

    #node addi R14 R1 1




    node send R1 R1 R1 R1
    node fwrd R3 R8 R6 R5
    node store R4 R9 R7 R2

    node add R10 R2 R3
    node add R10 R10 R4
    node add R10 R10 R5
    node add R10 R10 R6
    node add R10 R10 R7
    node add R10 R10 R8
    node add R10 R10 R9

    node add R14 ZERO ZERO
    node eqi R11 R10 3
    node add R10 R10 R1
    node eqi R12 R10 3
    node or STATE R11 R12
    node mask addi R14 ZERO 1 # branch taken
    node add STATE ZERO ZERO



    ctrl nop
    ctrl nop
    ctrl nop
    ctrl nop
    ctrl nop

    ctrl nop
    ctrl nop
    ctrl nop
    ctrl nop
    ctrl nop

    ctrl nop
    ctrl nop
    ctrl nop
    ctrl nop
    ctrl nop

    ctrl nop
    ctrl nop
    ctrl nop
    ctrl nop
    ctrl nop

    ctrl nop
    ctrl nop
    ctrl nop
    ctrl nop
    ctrl nop

    ctrl nop
    ctrl nop
    ctrl nop
    ctrl nop
    ctrl nop

    ctrl nop
    ctrl nop
    ctrl nop
    ctrl nop
    ctrl nop

    ctrl nop
    ctrl nop
    ctrl nop
    ctrl nop
    ctrl nop

    ctrl nop
    ctrl nop
    ctrl nop
    ctrl nop
    ctrl nop

    ctrl nop
    ctrl nop
    ctrl nop
    ctrl nop
    ctrl nop

    ctrl subi R6 R6 1
    ctrl beq dma_row_loop
    ctrl slt ZERO ZERO R6
    ctrl nop

    ctrl subi R8 R8 1
    ctrl beq dma_loop
    ctrl slt ZERO ZERO R8
    ctrl nop

start:

    ctrl add R3 R10 ZERO
    ctrl add VADDR ZERO ZERO

pixel_loop:
    ctrl lw R12 R3
    ctrl lw R12 R3
    ctrl nop

    ctrl beq after_add_vdata
    ctrl eqi ZERO R12 0
    ctrl nop
    ctrl addi R12 ZERO 255

after_add_vdata:
    #ctrl addi VDATA ZERO 255
    ctrl add VDATA R12 ZERO
    ctrl addi VADDR VADDR 1
    ctrl addi R3 R3 1

    ctrl beq dma_start
    ctrl slt ZERO R1 VADDR
    ctrl nop

    ctrl jump pixel_loop


infinite_loop:

    ctrl nop
    ctrl jump infinite_loop


#if R10 == 3 or R10 == 2 and R1 == 1:
#    next = 1
#else
#    next = 0
#
#
#if R10 == 3
#    R11 = 1
#    live
#else
#    R10 = R10 + R1
#    if R10 == 3
#        R12 = 1
#    endif
#endif
